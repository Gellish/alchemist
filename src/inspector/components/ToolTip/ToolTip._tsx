import React from "react";

type TType = "none"|"right"|"bottom"|"left"|"top"

interface IState{
	visible: boolean,
	x: number,
	y: number,
	type: TType
}

interface IClassNames{
	[key:string]:boolean
}

class ToolTip extends React.Component<any,IState> {
	constructor(props) {
		super(props);
    
		this.state = {
			visible: false,
			x: 0,
			y: 0,
			type: "none"
		};
	}
	render() {
		const { state } = this;
    
		const visibility = state.visible == true ? "on" : "off";
    
		const style = {
			left: ((state.x + window.scrollX) + "px"),
			top: ((state.y + window.scrollY) + "px")
		};
    
		const classNames:IClassNames = {};
    
		if (state.type != null && state.type != "none") {
			classNames[state.type] = true;
		}
    
		classNames[visibility] = true;
    
		return (
			<div id="tooltip" className={Object.keys(classNames).join(" ")} style={style}>
				<div className="tooltip-arrow"></div>
				<div className="tooltip-inner">
					<div>ToolTip Component</div>
				</div>
			</div>
		);
	}

	
	pastShow(hoverRect) {
		// position the tooltip after showing it

		const ttNode = ReactDOM.findDOMNode(this);
    
		if (ttNode != null) {
			let x = 0, y = 0;

			const docWidth = document.documentElement.clientWidth,
				docHeight = document.documentElement.clientHeight;
			
			const rx = hoverRect.x + hoverRect.width, // most right x
				lx = hoverRect.x, // most left x
				ty = hoverRect.y, // most top y
				by = hoverRect.y + hoverRect.height; // most bottom y
			
			// tool tip rectange
			const ttRect = ttNode.getBoundingClientRect();
      
			const bRight = (rx + ttRect.width) <= (window.scrollX + docWidth);
			const bLeft = (lx - ttRect.width) >= 0;
      
			const bAbove = (ty - ttRect.height) >= 0;
			const bBellow = (by + ttRect.height) <= (window.scrollY + docHeight);
      
			let newState: IState = {} as any;
      
			// the tooltip doesn't fit to the right
			if (bRight) {
				x = rx;
        
				y = ty + (hoverRect.height - ttRect.height);
        
				if (y < 0) {
					y = ty;
				}
        
				newState.type = "right";
			}
			else if (bBellow) {
				y = by;
        
				x = lx + (hoverRect.width - ttRect.width);
        
				if (x < 0) {
					x = lx;
				}
        
				newState.type = "bottom";
			}
			else if (bLeft) {
				x = lx - ttRect.width;
        
				y = ty + (hoverRect.height - ttRect.height);
        
				if (y < 0) {
					y = ty;
				}
        
				newState.type = "left";
			}
			else if (bAbove) {
				y = ty - ttRect.height;
        
				x = lx + (hoverRect.width - ttRect.width);
        
				if (x < 0) {
					x = lx;
				}
        
				newState.type = "top";
			}
      
			newState = { ...newState, x: x, y: y };
			
			this.setState(newState);
		}
	}
	show(hoverRect) {
		const { pastShow } = this;
    
		// setState will execute the pastShow with hoverRect as the tool tip becomes visible
		this.setState({ visible: true }, pastShow.bind(this, hoverRect));
	}
	hide() {
		this.setState({ visible: false });
	}
}

class Btn extends React.Component {
	events = {}
	constructor(props) {
		super(props);
    
		this.state = {
			id: props.id,
			text: props.children
		};
    
		this.events.onMouseOver = props.onMouseOver;
		this.events.onMouseOut = props.onMouseOut;
	}
	render() {
		return <button type="button" id={this.state.id} onMouseOver={this.events.onMouseOver} onMouseLeave={this.events.onMouseOut}>{this.state.text}</button>;
	}
}

class App extends React.Component {
	constructor(props) {
		super(props);
		console.log("* app constructor");
    
		this.setupRefs();
    
		this.setupEvents();
	}
	setupRefs() {
		this.toolTip = React.createRef();
	}
	setupEvents() {
		this.createBtn = this.createBtn.bind(this);
		this.handleOnMouseOver = this.handleOnMouseOver.bind(this);
		this.handleOnMouseOut = this.handleOnMouseOut.bind(this);
	}
	handleOnMouseOut(evt) {
		this.toolTip.current.hide();
	}
	handleOnMouseOver(evt) {
		// get hovered element reference
		const el = evt.currentTarget;
    
		if (el != null) {
			const rect = el.getBoundingClientRect();
      
			this.toolTip.current.show(rect);
		}
	}
	createBtn(id, text) {
		const { handleOnMouseOver, handleOnMouseOut } = this;
    
		return <Btn id={id} onMouseOver={handleOnMouseOver} onMouseOut={handleOnMouseOut}>{text}</Btn>;
	}
	render() {
		const { createBtn } = this;
  	
		return <div>
			{createBtn("btnLeft", "click 1")}
			{createBtn("btnRight", "click 2")}
			{createBtn("btnBtmR", "click 3")}
			{createBtn("btnCenter", "click 4")}
			<ToolTip ref={this.toolTip} />
		</div>;
	}
}